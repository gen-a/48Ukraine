{"version":3,"sources":["components/Forms/UserProfile/UserProfile.js","pages/User/Profile/Profile.js","components/OrdersList/OrdersList.js","pages/User/Orders/Orders.js","components/Forms/UserPassword/UserPassword.js","pages/User/ResetPassword/ResetPassword.js","pages/User/User.js"],"names":["UserProfile","_ref","error","callUpdateProfile","handleSubmit","pristine","reset","submitting","invalid","submitSucceeded","message","react_default","a","createElement","RenderForm","isSubmitting","isPristine","isSucceeded","isInvalid","onSubmit","onReset","title","text","messageType","type","submitLabel","resetLabel","className","Field","name","disabled","component","RenderField","label","defaultProps","connect","state","initialValues","user","profile","dispatch","data","updateProfile","reduxForm","form","validate","values","Profile","Fragment","PageTitle","Forms_UserProfile_UserProfile","OrdersList","pagesTotal","paginationUrl","orders","currentPage","Pagination","key","limit","total","current","parseInt","url","length","map","order","creationDate","number","count","PriceSticker","retail","fontSize","toFirstName","toLastName","toAddress","toZip","toCity","toPhone","Orders","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_this$props","callShowLoader","page","match","params","get","URL_FETCH_USER_ORDERS","onLoadOrders","bind","_this$props2","callAddFlashMessage","callHideLoader","callShowToast","setState","prevState","update","$set","records","perPage","_this$state","locale","components_OrdersList_OrdersList","localizePath","Component","app","departments","inCartQuantities","cart","quantities","UserPassword","isVisible","_this2","callUpdatePassword","MaterialUI","onChange","objectSpread","checked","updatePassword","errors","password","passwordAgain","ResetPassword","Forms_UserPassword_UserPassword","Switch","Route","exact","path","render","routeProps","User_ResetPassword_ResetPassword","assign","User_Profile_Profile","User_Orders_Orders","NotFound"],"mappings":"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","file":"static/js/4.702c24fd.chunk.js","sourcesContent":["/**\r\n * UserProfile - Redux form  Component.\r\n *\r\n * @see See [ReduxForm](https://redux-form.com/6.4.3) for more information about ReduxForm\r\n * @module UserProfile\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport RenderField from '../../UI/Forms/RenderField';\r\nimport RenderForm from '../../UI/Forms/RenderForm';\r\nimport { updateProfile } from '../../../actions/user';\r\n\r\nimport '../../../_grid.scss';\r\nimport '../Forms.scss';\r\n\r\n/**\r\n * Validate all form fields and return object with invalid entries error messages\r\n * @param values {object} - form values\r\n * @returns {{}}\r\n */\r\nconst validate = (values) => {\r\n  const errors = {};\r\n  return errors;\r\n};\r\n\r\n\r\n/**\r\n * PropTypes of the component\r\n * @type {object}\r\n */\r\nconst propTypes = {\r\n  /** A function meant to be passed to onSubmit={handleSubmit} or to onClick={handleSubmit} */\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  /** Action connected to the form submission */\r\n  callUpdateProfile: PropTypes.func.isRequired,\r\n  /** A generic error for the entire form given by the _error key */\r\n  error: PropTypes.string,\r\n  /** true if the form data is the same as its initialized values. Opposite of dirty. */\r\n  pristine: PropTypes.bool,\r\n  /** Resets all the values in the form to the initialized state, making it pristine again. */\r\n  reset: PropTypes.func.isRequired,\r\n  /** Whether or not your form is currently submitting */\r\n  submitting: PropTypes.bool,\r\n  /** true if the form has validation errors. Opposite of valid. */\r\n  invalid: PropTypes.bool,\r\n  /** If onSubmit is called, and succeed to submit , submitSucceeded will be set to true. */\r\n  submitSucceeded: PropTypes.bool,\r\n};\r\n/**\r\n * Default props of the component\r\n * @type {object}\r\n */\r\nconst defaultProps = {\r\n  error: '',\r\n  pristine: true,\r\n  submitting: false,\r\n  invalid: false,\r\n  submitSucceeded: false\r\n};\r\n\r\n\r\n/**\r\n * UserProfile form container Component\r\n */\r\nconst UserProfile = ({\r\n                       error,\r\n                       callUpdateProfile,\r\n                       handleSubmit,\r\n                       pristine,\r\n                       reset,\r\n                       submitting,\r\n                       invalid,\r\n                       submitSucceeded\r\n                     }) => {\r\n  const message = {};\r\n  /*\r\n      if (error) {\r\n        message.type = 'error';\r\n        message.text = error;\r\n      } else if (submitSucceeded) {\r\n        message.type = 'success';\r\n        message.text = 'Saved!!';\r\n      } else if (submitting) {\r\n        message.type = 'info';\r\n        message.text = 'Submitting...';\r\n      }\r\n  */\r\n\r\n  return (\r\n    <RenderForm\r\n      error={error}\r\n      isSubmitting={submitting}\r\n      isPristine={pristine}\r\n      isSucceeded={submitSucceeded}\r\n      isInvalid={invalid}\r\n      onSubmit={handleSubmit(callUpdateProfile)}\r\n      onReset={reset}\r\n      title=\"Has to be form title\"\r\n      message={message.text}\r\n      messageType={message.type}\r\n      submitLabel=\"Зберегти\"\r\n      resetLabel=\"Скинути\"\r\n    >\r\n\r\n      <div className=\"Forms__fields\">\r\n        <div className=\"Forms__field xs-flex_100 md-flex_50 md-marginRight_50\">\r\n          <Field name=\"email\" type=\"email\" disabled component={RenderField} label=\"Електронна адреса\"/>\r\n        </div>\r\n        <div className=\"Forms__field xs-flex_100 md-flex_50\">\r\n          <Field name=\"firstName\" type=\"text\" component={RenderField} label=\"Ім'я\"/>\r\n        </div>\r\n        <div className=\"Forms__field xs-flex_100 md-flex_50\">\r\n          <Field name=\"lastName\" type=\"text\" component={RenderField} label=\"Прізвище\"/>\r\n        </div>\r\n        <div className=\"Forms__field xs-flex_100 md-flex_50 md-marginRight_50\">\r\n          <Field name=\"phone\" type=\"text\" component={RenderField} label=\"Номер телефону\"/>\r\n        </div>\r\n      </div>\r\n\r\n    </RenderForm>\r\n  );\r\n};\r\n\r\nUserProfile.propTypes = propTypes;\r\nUserProfile.defaultProps = defaultProps;\r\n\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    initialValues: state.user.profile\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    callUpdateProfile: data => dispatch(updateProfile(data))\r\n  }\r\n);\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\r\n  form: 'formUserProfile', validate\r\n})(UserProfile));","import React from 'react';\r\nimport UserProfile from '../../../components/Forms/UserProfile';\r\nimport PageTitle from '../../../components/PageTitle';\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <>\r\n    <PageTitle\r\n      title=\"Персональні відомості\"\r\n    />\r\n      <UserProfile />\r\n    </>\r\n  )\r\n};\r\n\r\nexport default Profile;\r\n","/**\r\n * OrdersList Component.\r\n * Placeholder fot the description\r\n * @module OrdersList\r\n */\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PriceSticker from '../PriceSticker';\r\nimport Pagination from '../UI/Pagination';\r\n\r\nimport './OrdersList.scss';\r\n\r\n/**\r\n * PropTypes of the component\r\n * @type {object}\r\n */\r\nconst propTypes = {\r\n  /** Current page number. */\r\n  currentPage: PropTypes.number,\r\n  /** Total number of pages. */\r\n  pagesTotal: PropTypes.number,\r\n  /** URL template for url pagination links generation. */\r\n  paginationUrl: PropTypes.string,\r\n  /** Orders list data. */\r\n  orders: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n\r\n    })\r\n  ),\r\n};\r\n/**\r\n * Default props of the component\r\n * @type {object}\r\n */\r\nconst defaultProps = {\r\n  pagesTotal: 0,\r\n  currentPage: 0,\r\n  paginationUrl: '',\r\n  orders: [],\r\n};\r\n\r\n/**\r\n * General component description in JSDoc format. Markdown is *supported*.\r\n */\r\nconst OrdersList = ({ pagesTotal, paginationUrl, orders, currentPage }) => {\r\n  return (\r\n    <>\r\n    {pagesTotal > 1 && (\r\n      <Pagination\r\n        key={paginationUrl}\r\n        limit={5}\r\n        total={pagesTotal}\r\n        current={parseInt(currentPage, 10)}\r\n        url={paginationUrl}\r\n      />\r\n    )}\r\n    {orders.length === 0 && <div className=\"OrdersList__intro\">You have no orders yet...</div>}\r\n\r\n    <div className=\"OrdersList\">\r\n      <ul>\r\n      {orders.map(order => (\r\n        <li key={order.creationDate} className=\"OrdersList__entry\">\r\n          <div className=\"OrdersList__entryNumber\">{order.number}</div>\r\n          <div className=\"OrdersList__entryDate\">{order.creationDate}</div>\r\n          <div className=\"OrdersList__entryCount\">{order.count}</div>\r\n          <div className=\"OrdersList__entryTotal\">\r\n            <PriceSticker retail={order.total} fontSize=\"1rem\"/>\r\n          </div>\r\n\r\n\r\n          <div className=\"OrdersList__entryAddress\">\r\n            <span className=\"OrdersList__entryName\">{order.toFirstName} {order.toLastName}</span>\r\n            {order.toAddress}, {order.toZip}, {order.toCity}\r\n            </div>\r\n          <div className=\"OrdersList__entryPhone\">{order.toPhone}</div>\r\n\r\n        </li>\r\n      ))}\r\n      </ul>\r\n    </div>\r\n    </>\r\n  );\r\n};\r\n\r\nOrdersList.propTypes = propTypes;\r\nOrdersList.defaultProps = defaultProps;\r\n\r\nexport default OrdersList;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport update from 'react-addons-update';\r\nimport { URL_FETCH_USER_ORDERS } from '../../../config/api';\r\nimport { get } from '../../../services/ajax';\r\nimport OrdersList from '../../../components/OrdersList';\r\nimport { localizePath } from '../../../localization/index';\r\nimport PageTitle from '../../../components/PageTitle';\r\n/**\r\n * PropTypes of the component\r\n * @type {object}\r\n */\r\nconst propTypes = {\r\n  /** Call add flash message handler */\r\n  callAddFlashMessage: PropTypes.func.isRequired,\r\n  /** Show loader handler */\r\n  callShowLoader: PropTypes.func.isRequired,\r\n  /** Hide loader handler */\r\n  callHideLoader: PropTypes.func.isRequired,\r\n  /** Show toast handler */\r\n  callShowToast: PropTypes.func.isRequired,\r\n  /** Match parameters */\r\n  match: PropTypes.shape({\r\n    params: PropTypes.shape({\r\n      department: PropTypes.string,\r\n      page: PropTypes.string\r\n    }),\r\n    path: PropTypes.string,\r\n    url: PropTypes.string,\r\n  }).isRequired,\r\n  /** Current locale */\r\n  locale: PropTypes.string.isRequired,\r\n  /** Array of departments. */\r\n  departments: PropTypes.arrayOf(PropTypes.shape({\r\n    /** Icon of the department. */\r\n    icon: PropTypes.string,\r\n    /** Department name. */\r\n    name: PropTypes.string,\r\n    /** Name in url (slug). */\r\n    nameInUrl: PropTypes.string,\r\n  })).isRequired,\r\n  /** Object in cart quantities. */\r\n  inCartQuantities: PropTypes.shape({}).isRequired,\r\n};\r\n/**\r\n * Default props of the component\r\n * @type {object}\r\n */\r\nconst defaultProps = {};\r\n\r\n\r\nclass Orders extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      orders: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { callShowLoader, match: { params: { page } } } = this.props;\r\n    get(URL_FETCH_USER_ORDERS, { page }, this.onLoadOrders.bind(this));\r\n    callShowLoader();\r\n  }\r\n\r\n  onLoadOrders({ error, message, data }) {\r\n    const { callAddFlashMessage, callHideLoader, callShowToast } = this.props;\r\n    callHideLoader();\r\n    if (error === 0) {\r\n      this.setState(prevState => update(prevState, {\r\n        orders: { $set: data.records },\r\n        pagesTotal: { $set: data.pagesTotal },\r\n        perPage: { $set: data.perPage },\r\n        page: { $set: data.page },\r\n        count: { $set: data.count },\r\n      }));\r\n      callShowToast('order.info.historyHasBeenLoaded');\r\n    } else {\r\n      callAddFlashMessage(message, 'server response', 'error');\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { orders, pagesTotal, page } = this.state;\r\n    const { locale } = this.props;\r\n    if (orders.length === 0 && !page ) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <>\r\n      <PageTitle\r\n        title=\"Історія замовлень\"\r\n      />\r\n      <OrdersList\r\n        orders={orders}\r\n        currentPage={page}\r\n        pagesTotal={pagesTotal}\r\n        paginationUrl={localizePath('/user/orders/page/:page', locale)}\r\n      />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nOrders.propTypes = propTypes;\r\nOrders.defaultProps = defaultProps;\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    locale: state.app.locale,\r\n    departments: state.app.departments,\r\n    inCartQuantities: state.cart.quantities\r\n  }\r\n);\r\n\r\nexport default connect(mapStateToProps, null)(Orders);\r\n","/**\r\n * UserPassword - Redux form  Component.\r\n *\r\n * @see See [ReduxForm](https://redux-form.com/6.4.3) for more information about ReduxForm\r\n * @module UserPassword\r\n */\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport RenderField from '../../UI/Forms/RenderField';\r\nimport RenderForm from '../../UI/Forms/RenderForm';\r\nimport { updatePassword } from '../../../actions/user';\r\nimport { Switch } from '../../UI/MaterialUI';\r\nimport { password } from '../../../validation/validations';\r\n\r\nimport '../../../_grid.scss';\r\nimport '../Forms.scss';\r\n\r\n/**\r\n * Validate all form fields and return object with invalid entries error messages\r\n * @param values {object} - form values\r\n * @returns {{}}\r\n */\r\nconst validate = (values) => {\r\n  const errors = {};\r\n\r\n  if (!password(values.password)) {\r\n    errors.password = 'Has to be 6-12 characters length only letters or digits';\r\n  }\r\n\r\n  if (values.password !== values.passwordAgain) {\r\n    errors.passwordAgain = 'Passwords does not match!';\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\n\r\n/**\r\n * PropTypes of the component\r\n * @type {object}\r\n */\r\nconst propTypes = {\r\n  /** A function meant to be passed to onSubmit={handleSubmit} or to onClick={handleSubmit} */\r\n  handleSubmit: PropTypes.func.isRequired,\r\n  /** Action connected to the form submission */\r\n  callUpdatePassword: PropTypes.func.isRequired,\r\n  /** A generic error for the entire form given by the _error key */\r\n  error: PropTypes.string,\r\n  /** true if the form data is the same as its initialized values. Opposite of dirty. */\r\n  pristine: PropTypes.bool,\r\n  /** Resets all the values in the form to the initialized state, making it pristine again. */\r\n  reset: PropTypes.func.isRequired,\r\n  /** Whether or not your form is currently submitting */\r\n  submitting: PropTypes.bool,\r\n  /** true if the form has validation errors. Opposite of valid. */\r\n  invalid: PropTypes.bool,\r\n  /** If onSubmit is called, and succeed to submit , submitSucceeded will be set to true. */\r\n  submitSucceeded: PropTypes.bool,\r\n};\r\n/**\r\n * Default props of the component\r\n * @type {object}\r\n */\r\nconst defaultProps = {\r\n  error: '',\r\n  pristine: true,\r\n  submitting: false,\r\n  invalid: false,\r\n  submitSucceeded: false\r\n};\r\n\r\n\r\n/**\r\n * UserPassword form container Component\r\n */\r\nclass UserPassword extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isVisible: false\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      error, callUpdatePassword, handleSubmit, pristine, reset, submitting, invalid, submitSucceeded\r\n    } = this.props;\r\n\r\n    const { isVisible } = this.state;\r\n\r\n\r\n    const message = {};\r\n    /*\r\n        if (error) {\r\n          message.type = 'error';\r\n          message.text = error;\r\n        } else if (submitSucceeded) {\r\n          message.type = 'success';\r\n          message.text = 'Saved!!';\r\n        } else if (submitting) {\r\n          message.type = 'info';\r\n          message.text = 'Submitting...';\r\n        }\r\n    */\r\n\r\n\r\n    return (\r\n      <RenderForm\r\n        error={error}\r\n        isSubmitting={submitting}\r\n        isPristine={pristine}\r\n        isSucceeded={submitSucceeded}\r\n        isInvalid={invalid}\r\n        onSubmit={handleSubmit(callUpdatePassword)}\r\n        onReset={reset}\r\n        title=\"Has to be form title\"\r\n        message={message.text}\r\n        messageType={message.type}\r\n        submitLabel=\"Зберегти\"\r\n        resetLabel=\"Скинути\"\r\n      >\r\n\r\n        <div className=\"Forms__fields\">\r\n          <div className=\"Forms__field xs-flex_100 md-flex_50\">\r\n            <Field\r\n              name=\"password\"\r\n              type={isVisible ? 'text' : 'password'}\r\n              component={RenderField}\r\n              label=\"Пароль\"\r\n            />\r\n          </div>\r\n          <div className=\"Forms__field xs-flex_100 md-flex_50\">\r\n            <Field\r\n              name=\"passwordAgain\"\r\n              type={isVisible ? 'text' : 'password'}\r\n              component={RenderField}\r\n              label=\"Пароль знову\"\r\n            />\r\n          </div>\r\n          <div className=\"Forms__field xs-flex_100\">\r\n          <Switch\r\n            onChange={() => this.setState({ ...this.state, isVisible: !isVisible })}\r\n            checked={isVisible}\r\n            label=\"Позазати/сховати пароль\"\r\n          />\r\n          </div>\r\n        </div>\r\n      </RenderForm>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nUserPassword.propTypes = propTypes;\r\nUserPassword.defaultProps = defaultProps;\r\n\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    initialValues: state.user.profile\r\n  }\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => (\r\n  {\r\n    callUpdatePassword: data => dispatch(updatePassword(data))\r\n  }\r\n);\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(reduxForm({\r\n  form: 'formUserPassword', validate\r\n})(UserPassword));","import React from 'react';\r\nimport UserPassword from '../../../components/Forms/UserPassword';\r\nimport PageTitle from '../../../components/PageTitle';\r\n\r\nconst ResetPassword = () => {\r\n  return (\r\n    <>\r\n    <PageTitle\r\n      title=\"Змінити пароль\"\r\n    />\r\n      <UserPassword/>\r\n    </>\r\n  )\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { localizePath } from '../../localization/index';\r\n\r\nimport Profile from './Profile';\r\nimport Orders from './Orders';\r\nimport ResetPassword from './ResetPassword';\r\nimport NotFound from '../../pages/NotFound';\r\n\r\n\r\n/**\r\n * PropTypes of the component\r\n * @type {object}\r\n */\r\nconst propTypes = {\r\n  /** Current locale. */\r\n  locale: PropTypes.string.isRequired,\r\n};\r\n\r\nconst User = (props) => {\r\n  const { locale } = props;\r\n  return (\r\n    <Switch>\r\n      <Route\r\n        exact\r\n        path={localizePath('/user/reset-password', locale)}\r\n        render={routeProps => <ResetPassword {...props} {...routeProps} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path={localizePath('/user/profile', locale)}\r\n        render={routeProps => <Profile {...props} {...routeProps} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path={localizePath('/user/orders', locale)}\r\n        render={routeProps => <Orders {...props} {...routeProps} />}\r\n      />\r\n      <Route\r\n        exact\r\n        path={localizePath('/user/orders/page/:page', locale)}\r\n        render={routeProps => <Orders {...props} {...routeProps} />}\r\n      />\r\n      <Route\r\n        path=\"/user/*\"\r\n        render={routeProps => <NotFound {...props} {...routeProps} />}\r\n      />\r\n    </Switch>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    locale: state.app.locale,\r\n  }\r\n);\r\n\r\nUser.propTypes = propTypes;\r\n\r\nexport default connect(mapStateToProps, null)(User);\r\n"],"sourceRoot":""}